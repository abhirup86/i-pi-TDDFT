diff --git a/src/MAKE/Makefile.openmpi b/src/MAKE/Makefile.openmpi
index 91f413c..6325022 100644
--- a/src/MAKE/Makefile.openmpi
+++ b/src/MAKE/Makefile.openmpi
@@ -7,13 +7,13 @@ SHELL = /bin/sh
 # specify flags and libraries needed for your compiler
 
 CC =		mpic++
-CCFLAGS =	-O2 \
+CCFLAGS =	-g -O2 \
 		-funroll-loops -fstrict-aliasing -Wall -W -Wno-uninitialized
 SHFLAGS =	-fPIC
 DEPFLAGS =	-M
 
 LINK =		mpic++
-LINKFLAGS =	-O
+LINKFLAGS =	-O -g
 LIB =           -lstdc++
 SIZE =		size
 
diff --git a/src/MAKE/Makefile.serial b/src/MAKE/Makefile.serial
index 48000f7..8849b18 100755
--- a/src/MAKE/Makefile.serial
+++ b/src/MAKE/Makefile.serial
@@ -4,21 +4,18 @@ SHELL = /bin/sh
 
 # ---------------------------------------------------------------------
 # compiler/linker settings
-# specify flags and libraries needed for your compiler
+# generally no need to edit this section
+# unless additional compiler/linker flags or libraries needed for your machine
 
 CC =		g++
 CCFLAGS =	-O
-SHFLAGS =	-fPIC
 DEPFLAGS =	-M
-
 LINK =		g++
 LINKFLAGS =	-O
 LIB =           
-SIZE =		size
-
 ARCHIVE =	ar
 ARFLAGS =	-rc
-SHLIBFLAGS =	-shared
+SIZE =		size
 
 # ---------------------------------------------------------------------
 # LAMMPS-specific settings
@@ -38,8 +35,8 @@ LMP_INC =	-DLAMMPS_GZIP
 # LIB = name of MPI library
 
 MPI_INC =       -I../STUBS
-MPI_PATH =      -L../STUBS
-MPI_LIB =	-lmpi_stubs
+MPI_PATH =
+MPI_LIB =	../STUBS/libmpi.a
 
 # FFT library, OPTIONAL
 # see discussion in doc/Section_start.html#2_2 (step 6)
@@ -48,7 +45,7 @@ MPI_LIB =	-lmpi_stubs
 # PATH = path for FFT library
 # LIB = name of FFT library
 
-FFT_INC =
+FFT_INC = 
 FFT_PATH = 
 FFT_LIB =
 
@@ -80,19 +77,15 @@ $(EXE):	$(OBJ)
 	$(LINK) $(LINKFLAGS) $(EXTRA_PATH) $(OBJ) $(EXTRA_LIB) $(LIB) -o $(EXE)
 	$(SIZE) $(EXE)
 
-# Library targets
+# Library target
 
 lib:	$(OBJ)
 	$(ARCHIVE) $(ARFLAGS) $(EXE) $(OBJ)
 
-shlib:	$(OBJ)
-	$(CC) $(CCFLAGS) $(SHFLAGS) $(SHLIBFLAGS) $(EXTRA_PATH) -o $(EXE) \
-        $(OBJ) $(EXTRA_LIB) $(LIB)
-
 # Compilation rules
 
 %.o:%.cpp
-	$(CC) $(CCFLAGS) $(SHFLAGS) $(EXTRA_INC) -c $<
+	$(CC) $(CCFLAGS) $(EXTRA_INC) -c $<
 
 %.d:%.cpp
 	$(CC) $(CCFLAGS) $(EXTRA_INC) $(DEPFLAGS) $< > $@
diff --git a/src/STUBS/Makefile b/src/STUBS/Makefile
index a194341..5ef72da 100644
--- a/src/STUBS/Makefile
+++ b/src/STUBS/Makefile
@@ -16,7 +16,7 @@ INC =		mpi.h
 
 # Definitions
 
-EXE =		libmpi_stubs.a
+EXE =		libmpi.a
 OBJ = 		$(SRC:.c=.o)
 
 # System-specific settings
diff --git a/src/compute_pressure.cpp b/src/compute_pressure.cpp
index 95a66af..6bede15 100644
--- a/src/compute_pressure.cpp
+++ b/src/compute_pressure.cpp
@@ -169,7 +169,7 @@ double ComputePressure::compute_scalar()
   if (update->vflag_global != invoked_scalar)
     error->all(FLERR,"Virial was not tallied on needed timestep");
 
-  // invoke temperature it it hasn't been already
+  // invoke temperature if it hasn't been already
 
   double t;
   if (keflag) {
diff --git a/src/fix_ipi.cpp b/src/fix_ipi.cpp
new file mode 100644
index 0000000..c6dd138
--- /dev/null
+++ b/src/fix_ipi.cpp
@@ -0,0 +1,381 @@
+/* ----------------------------------------------------------------------
+   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator
+   http://lammps.sandia.gov, Sandia National Laboratories
+   Steve Plimpton, sjplimp@sandia.gov
+
+   Copyright (2003) Sandia Corporation.  Under the terms of Contract
+   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains
+   certain rights in this software.  This software is distributed under
+   the GNU General Public License.
+
+   See the README file in the top-level LAMMPS directory.
+------------------------------------------------------------------------- */
+
+#include "mpi.h"
+#include "stdio.h"
+#include "string.h"
+#include "fix_ipi.h"
+#include "atom.h"
+#include "force.h"
+#include "update.h"
+#include "respa.h"
+#include "error.h"
+#include "kspace.h"
+#include "modify.h"
+#include "compute.h"
+#include "neighbor.h"
+#include "domain.h"
+#include "compute_pressure.h"
+
+
+using namespace LAMMPS_NS;
+using namespace FixConst;
+
+// socket interface
+#include <stdlib.h>
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <sys/un.h>
+#include <netdb.h>
+
+
+#define MSGLEN 12
+namespace sockets {
+
+void error(const char *msg)
+// Prints an error message and then exits.
+
+{   perror(msg);  exit(0);   }
+
+void open_socket(int *psockfd, int* inet, int* port, char* host)
+/* Opens a socket.
+
+Note that fortran passes an extra argument for the string length, but this is
+ignored here for C compatibility.
+
+Args:
+   psockfd: The id of the socket that will be created.
+   inet: An integer that determines whether the socket will be an inet or unix
+      domain socket. Gives unix if 0, inet otherwise.
+   port: The port number for the socket to be created. Low numbers are often
+      reserved for important channels, so use of numbers of 4 or more digits is
+      recommended.
+   host: The name of the host server.
+*/
+
+{
+   int sockfd, portno, n;
+   struct hostent *server;
+
+   fprintf(stderr, "Connection requested %s, %d, %d\n", host, *port, *inet);
+   struct sockaddr * psock; int ssock;
+   if (*inet>0)
+   {
+      struct sockaddr_in serv_addr;      psock=(struct sockaddr *)&serv_addr;     ssock=sizeof(serv_addr);
+      sockfd = socket(AF_INET, SOCK_STREAM, 0);
+      if (sockfd < 0)  error("ERROR opening socket");
+
+      server = gethostbyname(host);
+      if (server == NULL)
+      {
+         fprintf(stderr, "ERROR, no such host %s \n", host);
+         exit(0);
+      }
+
+      bzero((char *) &serv_addr, sizeof(serv_addr));
+      serv_addr.sin_family = AF_INET;
+      bcopy((char *)server->h_addr, (char *)&serv_addr.sin_addr.s_addr, server->h_length);
+      serv_addr.sin_port = htons(*port);
+   }
+   else
+   {
+      struct sockaddr_un serv_addr;      psock=(struct sockaddr *)&serv_addr;     ssock=sizeof(serv_addr);
+      sockfd = socket(AF_UNIX, SOCK_STREAM, 0);
+      bzero((char *) &serv_addr, sizeof(serv_addr));
+      serv_addr.sun_family = AF_UNIX;
+      strcpy(serv_addr.sun_path, "/tmp/ipi_");
+      strcpy(serv_addr.sun_path+9, host);
+   }
+
+   if (connect(sockfd, psock, ssock) < 0) error("ERROR connecting");
+
+   *psockfd=sockfd;
+}
+
+void writebuffer(int sockfd, char *data, int len)
+/* Writes to a socket.
+
+Args:
+   psockfd: The id of the socket that will be written to.
+   data: The data to be written to the socket.
+   plen: The length of the data in bytes.
+*/
+{
+   int n;
+
+   n = write(sockfd,data,len);
+   if (n < 0) error("ERROR writing to socket");
+}
+
+
+void readbuffer(int sockfd, char *data, int len)
+/* Reads from a socket.
+
+Args:
+   psockfd: The id of the socket that will be read from.
+   data: The storage array for data read from the socket.
+   plen: The length of the data in bytes.
+*/
+
+{
+   int n, nr;
+
+
+   n = nr = read(sockfd,data,len);
+
+   while (nr>0 && n<len )
+   {  nr=read(sockfd,&data[n],len-n); n+=nr; }
+
+   if (n == 0) error("ERROR reading from socket");
+}
+
+
+}; // ends namespace socket
+
+/* ---------------------------------------------------------------------- */
+
+FixIPI::FixIPI(LAMMPS *lmp, int narg, char **arg) :
+  Fix(lmp, narg, arg)
+{
+  /* format for fix:
+   *  fix  num  group_id  ipi  host port [unix]
+   */
+  if (strcmp(style,"ipi") != 0 && narg < 5)
+    error->all(FLERR,"Illegal fix ipi command");
+
+  //box_change = 1;
+  //box_change_size = 1;
+
+  strcpy(host, arg[3]);
+  port=atoi(arg[4]);
+
+  //! must modify to allow for unix/inet sockets choice. now hardcoded to unix!
+  if (narg > 5 && strcmp(arg[5],"unix") ==0 ) inet=0; else inet=1;
+
+  MPI_Comm_rank(world,&me);
+  if (me==0) master=1; else master=0;
+
+  hasdata=0; bsize=0;
+
+
+  char** newarg = new char*[3];
+  newarg[0] = (char *) "ipi_temp";
+  newarg[1] = (char *) "all";
+  newarg[2] = (char *) "temp";
+  modify->add_compute(3,newarg);
+  delete [] newarg;
+//  tflag = 1;
+
+  newarg = new char*[5];
+  newarg[0] = (char *) "ipi_press";
+  newarg[1] = (char *) "all";
+  newarg[2] = (char *) "pressure";
+  newarg[3] = (char *) "ipi_temp";
+  newarg[4] = (char *) "virial";
+  modify->add_compute(5,newarg);
+  delete [] newarg;
+//  pflag = 1;
+}
+
+/* ---------------------------------------------------------------------- */
+
+int FixIPI::setmask()
+{
+  int mask = 0;
+  mask |= INITIAL_INTEGRATE;
+  mask |= FINAL_INTEGRATE;
+  return mask;
+}
+
+/* ---------------------------------------------------------------------- */
+
+void FixIPI::init()
+{
+  if (master) sockets::open_socket(&ipisock, &inet, &port, host);
+  else ipisock=0;
+  //! should check for success in socket opening
+
+  // asks for evaluation of PE at first step
+  modify->compute[modify->find_compute("thermo_pe")]->invoked_scalar = -1;
+  modify->addstep_compute_all(update->ntimestep + 1);
+
+  if (force->kspace) kspace_flag = 1;
+  else kspace_flag = 0;
+
+  // makes sure that neighbor lists are re-built at each step (cannot make assumptions when cycling over beads!)
+  neighbor->delay = 0;
+  neighbor->every = 1;
+}
+
+void FixIPI::initial_integrate(int vflag)
+{
+  char header[MSGLEN+1];
+
+  if (hasdata)
+    error->all(FLERR, "Driver got out of sync in initial_integrate and will die!");
+
+  double cellh[9], cellih[9];
+  int nat;
+  if (master)   {
+
+    while (true) {
+      sockets::readbuffer(ipisock, header, MSGLEN); header[MSGLEN]=0;
+
+      if (strcmp(header,"STATUS      ") == 0 )
+        sockets::writebuffer(ipisock,"READY       ",MSGLEN);
+      else break;
+    }
+
+    if (strcmp(header,"POSDATA     ") == 0 )  {
+      sockets::readbuffer(ipisock, (char*) cellh, 9*sizeof(double));
+      sockets::readbuffer(ipisock, (char*) cellih, 9*sizeof(double));
+      sockets::readbuffer(ipisock, (char*) &nat, sizeof(int));
+
+      if (bsize==0) { bsize=3*nat; buffer = new double[bsize]; }
+      else if (bsize!=3*nat)
+        error->all(FLERR, "Number of atoms changed along the way.");
+
+      sockets::readbuffer(ipisock, (char*) buffer, sizeof(double)*bsize);
+    }
+    else error->all(FLERR, "Wrapper did not send positions, I will now die!");
+
+  }
+
+  //shares the atomic coordinates with everyone
+  //MPI_Bcast(&nat,1,MPI_INTEGER,0,world);
+  MPI_Bcast(&nat,1,MPI_INT,0,world);
+  //must also allocate the buffer on the non-head nodes
+  if (bsize==0) { bsize=3*nat; buffer = new double[bsize]; }
+  MPI_Bcast(cellh,9,MPI_DOUBLE,0,world);
+  MPI_Bcast(cellih,9,MPI_DOUBLE,0,world);
+  MPI_Bcast(buffer,bsize,MPI_DOUBLE,0,world);
+
+
+  //updates atomic coordinates based on the data received
+  //!! SHOULD ALSO WORK OUT HOW TO UPDATE CELL!
+  double *boxhi = domain->boxhi;
+  double *boxlo = domain->boxlo;
+  double posconv;
+  posconv=0.52917721*force->angstrom;
+  boxlo[0] = 0;
+  boxlo[1] = 0;
+  boxlo[2] = 0;
+  boxhi[0] = cellh[0]*posconv;
+  boxhi[1] = cellh[4]*posconv;
+  boxhi[2] = cellh[8]*posconv;
+  domain->xy = cellh[1]*posconv;
+  domain->xz = cellh[2]*posconv;
+  domain->yz = cellh[5]*posconv;
+  domain->reset_box();
+  domain->box_change = 1;
+  if (kspace_flag) force->kspace->setup();
+  //pressure->addstep(update->ntimestep+1);
+
+  double **x = atom->x;
+  int *mask = atom->mask;
+  int nlocal = atom->nlocal;
+  if (igroup == atom->firstgroup) nlocal = atom->nfirst;
+  for (int i = 0; i < nlocal; i++) {
+     if (mask[i] & groupbit) {
+       x[i][0]=buffer[3*(atom->tag[i]-1)+0]*posconv;
+       x[i][1]=buffer[3*(atom->tag[i]-1)+1]*posconv;
+       x[i][2]=buffer[3*(atom->tag[i]-1)+2]*posconv;
+     }
+  }
+
+  // compute PE. makes sure that it will be evaluated at next step
+  modify->compute[modify->find_compute("thermo_pe")]->invoked_scalar = -1;
+  modify->addstep_compute_all(update->ntimestep+1);
+
+  hasdata=1;
+}
+
+/* ---------------------------------------------------------------------- */
+
+void FixIPI::final_integrate()
+{
+  char header[MSGLEN+1];
+  double vir[9], pot=0.0;
+  double forceconv, potconv, posconv, pressconv, posconv3;
+  potconv=3.1668152e-06/force->boltz;
+  posconv=0.52917721*force->angstrom;
+  posconv3=posconv*posconv*posconv;
+  forceconv=potconv*posconv;
+  pressconv=1/force->nktv2p;
+
+  // compute for potential energy
+  pot=modify->compute[modify->find_compute("thermo_pe")]->compute_scalar();
+  pot*=potconv;
+  //!should also get virial (configurational bit only!)
+
+  if (!hasdata)
+    error->all(FLERR, "Driver got out of sync in final_integrate and will die!");
+
+  int nat=bsize/3;
+  double **f= atom->f, lbuf[bsize];
+
+  int nlocal = atom->nlocal;
+  if (igroup == atom->firstgroup) nlocal = atom->nfirst;
+  for (int i = 0; i < bsize; ++i) lbuf[i]=0.0;
+  for (int i = 0; i < nlocal; i++) {        // do these also contain ghost atoms???
+     lbuf[3*(atom->tag[i]-1)+0]=f[i][0]*forceconv;  //must check units
+     lbuf[3*(atom->tag[i]-1)+1]=f[i][1]*forceconv;
+     lbuf[3*(atom->tag[i]-1)+2]=f[i][2]*forceconv;
+  }
+  MPI_Allreduce(lbuf,buffer,bsize,MPI_DOUBLE,MPI_SUM,world);
+
+  for (int i = 0; i < 9; ++i) vir[i]=0.0;
+  //Need the following lines in the input:
+  //compute ipi_temp all temp
+  //compute ipi_press all pressure ipi_temp virial
+  int press_id = modify->find_compute("ipi_press");
+  Compute* comp_p = modify->compute[press_id];
+  comp_p->compute_vector();
+  double myvol = domain->xprd*domain->yprd*domain->zprd/posconv3;
+  //for (int i = 0; i < 6; i++)
+  vir[0] = comp_p->vector[0]*pressconv*myvol;
+  vir[4] = comp_p->vector[1]*pressconv*myvol;
+  vir[8] = comp_p->vector[2]*pressconv*myvol;
+  vir[5] = comp_p->vector[3]*pressconv*myvol;
+  vir[2] = comp_p->vector[4]*pressconv*myvol;
+  vir[1] = comp_p->vector[5]*pressconv*myvol;
+
+  if (master) {
+    while (true) {
+      sockets::readbuffer(ipisock, header, MSGLEN); header[MSGLEN]=0;
+
+      if (strcmp(header,"STATUS      ") == 0 )
+        sockets::writebuffer(ipisock,"HAVEDATA    ",MSGLEN);
+      else break;
+    }
+
+    if (strcmp(header,"GETFORCE    ") == 0 )  {
+
+      sockets::writebuffer(ipisock,"FORCEREADY  ",MSGLEN);
+      sockets::writebuffer(ipisock,(char*) &pot,sizeof(double));
+      sockets::writebuffer(ipisock,(char*) &nat,sizeof(int));
+      sockets::writebuffer(ipisock,(char*) buffer, bsize*sizeof(double));
+      sockets::writebuffer(ipisock,(char*) vir,9*sizeof(double));
+      nat=0;  sockets::writebuffer(ipisock,(char*) &nat,sizeof(int));
+    }
+    else
+      error->all(FLERR, "Wrapper did not ask for forces, I will now die!");
+
+  }
+
+  hasdata=0;
+}
+
+
diff --git a/src/fix_ipi.h b/src/fix_ipi.h
new file mode 100644
index 0000000..9ea064d
--- /dev/null
+++ b/src/fix_ipi.h
@@ -0,0 +1,55 @@
+/* ----------------------------------------------------------------------
+   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator
+   http://lammps.sandia.gov, Sandia National Laboratories
+   Steve Plimpton, sjplimp@sandia.gov
+
+   Copyright (2003) Sandia Corporation.  Under the terms of Contract
+   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains
+   certain rights in this software.  This software is distributed under
+   the GNU General Public License.
+
+   See the README file in the top-level LAMMPS directory.
+------------------------------------------------------------------------- */
+
+#ifdef FIX_CLASS
+
+FixStyle(ipi,FixIPI)
+
+#else
+
+#ifndef LMP_FIX_IPI_H
+#define LMP_FIX_IPI_H
+
+#include "fix.h"
+
+namespace LAMMPS_NS {
+
+class FixIPI : public Fix {
+ public:
+  FixIPI(class LAMMPS *, int, char **);
+  virtual ~FixIPI() {}
+  int setmask();
+  virtual void init();
+  virtual void initial_integrate(int);
+  virtual void final_integrate();
+
+ protected:
+  char host[1024]; int port; int inet, master, hasdata;
+  int ipisock, me; double *buffer; long bsize;
+  int kspace_flag;
+};
+
+}
+
+#endif
+#endif
+
+/* ERROR/WARNING messages:
+
+E: Illegal ... command
+
+Self-explanatory.  Check the input script syntax and compare to the
+documentation for the command.  You can use -echo screen as a
+command-line option when running LAMMPS to see the offending line.
+
+*/
diff --git a/src/verlet.cpp b/src/verlet.cpp
index ad8263d..bb84dbd 100644
--- a/src/verlet.cpp
+++ b/src/verlet.cpp
@@ -228,12 +228,14 @@ void Verlet::run(int n)
     // initial time integration
 
     modify->initial_integrate(vflag);
+    //ev_set(ntimestep); //! HACKED IN BY MC
+    
     if (n_post_integrate) modify->post_integrate();
 
     // regular communication vs neighbor list rebuild
 
     nflag = neighbor->decide();
-
+    //fprintf(stderr,"neighbor flag %i\n", nflag);
     if (nflag == 0) {
       timer->stamp();
       comm->forward_comm();
@@ -242,6 +244,7 @@ void Verlet::run(int n)
       if (n_pre_exchange) modify->pre_exchange();
       if (triclinic) domain->x2lamda(atom->nlocal);
       domain->pbc();
+      domain->pbc();
       if (domain->box_change) {
         domain->reset_box();
         comm->setup();
